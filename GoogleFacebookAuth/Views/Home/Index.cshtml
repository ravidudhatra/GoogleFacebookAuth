@{
	ViewData["Title"] = "Index";
}

<br />
<div class="container">
	<h2>Employees Record</h2>
	
	<button type="button" class="btn btn-primary" onclick="onAddEmployeeClick();">
		Add New Employee
	</button><br /><br />


	<div class="form-group">
		<label for="searchName">Search by Name:</label>
		<input type="text" class="form-control" id="searchName" placeholder="Enter name" required>
		<small id="searchMessage" class="text-danger"></small>
	</div>
	<button type="button" class="btn btn-primary" onclick="searchByName()">Search</button>
	<br /><br />

	<table class="table table-bordered table-hover">
		<thead>
			<tr>
				<th>ID</th>
				<th>Name</th>
				<th>Salary</th>
				<th>Department</th>
				<th>Action</th>
			</tr>
		</thead>


		<tbody class="tbody">
			<!-- Employee records will be populated here -->
		</tbody>


	</table>
</div>

@* <!-- Toast container -->
<div id="toastContainer" aria-live="polite" aria-atomic="true" style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
	<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="3000">
		<div class="toast-header">
			<strong class="mr-auto">Employee Added</strong>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			Employee has been added successfully.
		</div>
	</div>
</div>

<!-- Toast container for update notification -->
<div id="updatetoastcontainer" aria-live="polite" aria-atomic="true" style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
	<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="3000">
		<div class="toast-header">
			<strong class="mr-auto">employee updated</strong>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			employee has been updated successfully.
		</div>
	</div>
</div>  

<!-- Toast container for deletion notification -->
<div id="deletetoastcontainer" aria-live="polite" aria-atomic="true" style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
	<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="3000">
		<div class="toast-header">
			<strong class="mr-auto">employee deleted</strong>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			employee has been deleted successfully.
		</div>
	</div>
</div> *@
	
<!-- Toast container Add Update Delete-->
<div id="toastContainer" class="toast-container" aria-live="polite" aria-atomic="true">
	<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="3000">
		<div class="toast-header">
			<strong class="mr-auto"></strong>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>	
		<div class="toast-body"></div>
	</div>
</div>



 @* Adding model on Add the employee *@
<div class="modal fade" id="addEditEmployeeModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabelAddEmployee" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title" id="lblAddEmp">Add Employee</h4>
				<button type="button" class="close" onclick="CloseAddEditEmployeeModal()">&times;</button>
			</div>

				<div class="modal-body">
					<form id="employeeForm">
						<input type="hidden" id="Id" name="Id" />
						<div class="form-group">
							<label for="Name">Name</label>
							<input type="text" class="form-control" id="Name" placeholder="Name"  />
							<div id="nameValidationMessage" class="invalid-feedback">
								Name is required.
							</div>
						</div>
						<div class="form-group">
							<label for="Salary">Salary</label>
							<input type="text" class="form-control" id="Salary" placeholder="Salary" />
							<div id="salaryValidationMessage" class="invalid-feedback">
								Salary must contain only numbers.
							</div>
						</div>
						<div class="form-group">
							<label for="Department">Department</label>
							<input type="text" class="form-control" id="Department" placeholder="Department"  />
						<div id="departmentValidationMessage" class="invalid-feedback">
							Department is required.
						</div>
						</div>
					</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" id="btnAddEmployee" onclick="AddEmployee('add')">Add Employee</button>
				<button type="button" class="btn btn-primary" id="btnUpdateEmployee" onclick="UpdateEmployee();">Update Employee</button>
				<button type="button" class="btn btn-danger" onclick="CloseAddEditEmployeeModal()">Close</button>
			</div>
		</div>
	</div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				Are you sure you want to delete the following Employee?
			</div>
			<div class="modal-body">
				<input type="hidden" id="HiddenEmployeeId" name="HiddenEmployeeId" />
				<label id="labelToUpdateName" style="display: block; text-align: center;"></label><br />
				<label id="labelToUpdateDepartment" style="display: block; text-align: center;"></label><br />
				<label id="labelToUpdateSalary" style="display: block; text-align: center;"></label><br />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" id="btnDelete" onclick="return Delete();">Delete</button>
				<button type="button" class="btn btn-danger" onclick="CloseAddEditEmployeeModal()">Close</button>
			</div>
		</div>
	</div>
</div>
 


	
<!-- jQuery (necessary for Bootstrap's JavaScript plugins and AJAX) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>




@section Scripts
{

	<script>
		// Load Data in Table when document is ready
		$(document).ready(function () {
			loadData();
		});

		// Load Data function
		function loadData() {
			debugger
			$.ajax({
				url: '/Employee/GetAll',
				type: 'GET',
				success: function (result) {
					var html = '';
					$.each(result.data, function (key, item) {
						html += '<tr>';
						html += '<td>' + item.Id + '</td>';
						html += '<td>' + item.Name + '</td>';
						html += '<td>' + item.Salary + '</td>';
						html += '<td>' + item.Department + '</td>';
						html += '<td> <a href="#" class="btn btn-primary" onclick="return getbyID(' + item.Id + ')"> Edit </a> ' +
							'<a href ="#" class="btn btn-danger" onclick ="ConfirmDelete(' + item.Id + ')"> Delete </a> ' +
							'</td>';
						html += '</tr>';
					});
					$('.tbody').html(html);
				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		}

		//Search employee using Name
		function searchByName() {
			var searchQuery = $('#searchName').val();

			// Check if the search query is empty
			if (searchQuery.trim() === '') {
				$('#searchMessage').text("Please enter a name to search.");
				return; // Stop further execution of the function
			} else {
				$('#searchMessage').text(""); // Clear any previous message
			}

			$.ajax({
				url: '/Employee/SearchByName',
				type: 'GET',
				data: { name: searchQuery },
				success: function (result) {
					if (result.data.length === 0) {
						$('#searchMessage').text("No results found for '" + searchQuery + "'.");
						$('.tbody').html(''); // Clear any previous search results
					} else {
						$('#searchMessage').text(""); // Clear any previous message
						var html = '';
						$.each(result.data, function (key, item) {
							html += '<tr>';
							html += '<td>' + item.Id + '</td>';
							html += '<td>' + item.Name + '</td>';
							html += '<td>' + item.Salary + '</td>';
							html += '<td>' + item.Department + '</td>';
							html += '<td> <a href="#" class="btn btn-primary" onclick="return getbyID(' + item.Id + ')"> Edit </a> ' +
								'<a href ="#" class="btn btn-danger" onclick ="ConfirmDelete(' + item.Id + ')"> Delete </a> ' +
								'</td>';
							html += '</tr>';
						});
						$('.tbody').html(html);
					}
				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		}

		function showToast(message, type) {
			var toastContainer = document.getElementById('toastContainer');
			var toast = toastContainer.querySelector('.toast');

			// Set toast message and type
			var toastHeader = toast.querySelector('.toast-header strong');
			var toastBody = toast.querySelector('.toast-body');
			toastHeader.textContent = type;
			toastBody.textContent = message;

			// Show the toast
			var toastInstance = new bootstrap.Toast(toast);
			toastInstance.show();
		}


		// Add Employee Data Function
		function AddEmployee(type) {

			if ($('#employeeForm')[0].checkValidity()) {

				// Check if the Name field is empty
				var name = $('#Name').val();
				if ($('#Name').val().trim() === '') {
					// Show validation message for the Name field
					$('#Name').addClass("is-invalid");
					$('#nameValidationMessage').text("Name is required.");
					return; // Exit the function if Name field is empty
				} else {
					// Hide validation message if Name field is not empty
					$('#Name').removeClass("is-invalid");
					$('#nameValidationMessage').text("");
				}

				var department = $('#Department').val();
				if ($('#Department').val().trim() === '') {
					$('#Department').addClass('is-invalid');
					$('#departmentValidationMessage').text("Department is required.");
					return;
				} else {
					$('#Department').removeClass('is-invalid');
					$('#departmentValidationMessage').text("");
				}
		
				var salaryValue = $('#Salary').val();
				// Check if salary contains only digits
				if (!/^\d+$/.test(salaryValue)) {
					$("#salaryValidationMessage").show();
					$('#Salary').addClass("is-invalid");
					return; // Exit the function if salary is invalid
				} else {
					$("#salaryValidationMessage").hide();
					$('#Salary').removeClass("is-invalid");
				}

				var employee = {
					EmployeeID: $('#Id').val(),
					Name: $('#Name').val(),
					Salary: $('#Salary').val(),
					Department: $('#Department').val()
				};
				$.ajax({
					url: '@Url.Action("AddEmployee", "Employee")',
					type: 'POST',
					contentType: 'application/json',
					data: JSON.stringify(employee),
					success: function (result) {
						loadData();

						// $('#toastContainer .toast').toast('show');
						// // Hide any other toast containers that may be open
						// $('#updatetoastcontainer .toast').toast('hide');
						// $('#deletetoastcontainer .toast').toast('hide');
						// After successfully adding an employee
						showToast("Employee has been added successfully.", "Employee Added");



						$("#addEditEmployeeModal").modal("hide");
					},
					error: function (errormessage) {
						alert(errormessage.responseText);

					}
				});
			} else {
				$('#employeeForm')[0].reportValidity();
			}
		}

		//Close The Model
		function CloseAddEditEmployeeModal() {
			$("#addEditEmployeeModal").modal("hide");
			$("#deleteConfirmationModal").modal("hide");
		}

		// Function for getting the Data Based upon Employee ID
		function getbyID(EmpID) {
			$('#Name').css('border-color', 'lightgrey');
			$('#Salary').css('border-color', 'lightgrey');
			$('#Department').css('border-color', 'lightgrey');
			$.ajax({
				url: "/Employee/GetById/" + EmpID,
				type: "GET",
				contentType: 'application/json',
				success: function (result) {
					$('#Id').val(result.data.Id);
					$('#Name').val(result.data.Name);
					$('#Salary').val(result.data.Salary);
					$('#Department').val(result.data.Department);

					$('#addEditEmployeeModal').modal('show');

					var lblElement = document.getElementById("lblAddEmp");
					lblElement.innerText = "Update Employee";

					$('#btnUpdateEmployee').show();
					$('#btnAddEmployee').hide();

				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
			return false;
		}

		// Function for updating employee's record
		function UpdateEmployee() {
			var employee = {
				Id: $('#Id').val(),
				Name: $('#Name').val(),
				Salary: $('#Salary').val(),
				Department: $('#Department').val(),
			};
			$.ajax({
				url: '@Url.Action("UpdateEmployee", "Employee")',
				type: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(employee),
				success: function (result) {
					loadData();

					$('#addEditEmployeeModal').modal('hide');
					// $('#updatetoastcontainer .toast').toast('show');
					// // Hide any other toast containers that may be open
					// $('#toastContainer .toast').toast('hide');
					// $('#deletetoastcontainer .toast').toast('hide');
					showToast("Employee has been updated successfully.", "Employee Updated");


					$('#Id').val("");
					$('#Name').val("");
					$('#Salary').val("");
					$('#Department').val("");
					

				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		}

		// Function for showing the Popup before deletion
		function ConfirmDelete(EmpID) {
			$.ajax({
				url: "/Employee/GetById/" + EmpID,
				type: "GET",
				contentType: 'application/json',
				success: function (result) {
					$("#labelToUpdateName").html("<b>Name: </b>" + result.data.Name);
					$("#labelToUpdateDepartment").html("<b>Department: </b>" + result.data.Department);
					$("#labelToUpdateSalary").html("<b>Salary: </b>" + result.data.Salary);
					$('#HiddenEmployeeId').val(EmpID);
					$('#deleteConfirmationModal').modal('show');
				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		}

		// Function for deleting the Employee
		function Delete() {
			var ID = $('#HiddenEmployeeId').val();
			$.ajax({
				url: "/Employee/DeleteEmployee/" + ID,
				type: 'POST',
				contentType: 'application/json',
				success: function (result) {
					loadData();
					$('#deleteConfirmationModal').modal('hide');
					// // Show delete toast notification
					// $('#deletetoastcontainer .toast').toast('show');
					// $('#toastContainer .toast').toast('hide');
					// $('#updatetoastcontainer .toast').toast('hide');
					showToast("Employee has been Deleted successfully.", "Employee Deleted");

				},
				error: function (errormessage) {
					alert(errormessage.responseText);
				}
			});
		}

		// Function for clearing the textboxes
		function clearTextBox() {
			$('#Id').val("");
			$('#Name').val("");
			$('#Salary').val("");
			$('#Department').val("");
			$('#btnUpdateEmployee').hide();
			$('#btnAdd').show();
			$('#Name').css('border-color', 'lightgrey');
			$('#Salary').css('border-color', 'lightgrey');
			$('#Department').css('border-color', 'lightgrey');
		}

		//Addlebel on Addemployee model
		function onAddEmployeeClick() {
			clearTextBox();
			$("#addEditEmployeeModal").modal("show");

			$('#btnAddEmployee').show();
			$('#btnUpdateEmployee').hide();

			var lblElement = document.getElementById("lblAddEmp");
			lblElement.innerText = "Add Employee";
			
		}

	</script>

}